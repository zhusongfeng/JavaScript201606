需求：隔行换色的表格排序
1）获取并解析数据 getDate()
2)绑定数据 bind() 用了两种思路：1）字符串拼接 2）动态创建
3）隔行换色 changeColor 两种思路1）switch 2）直接用% 循环中套一句话
4)表格排序: 1.类数组转数组 2.sort排序 3.重新插入页面
优化处理： this ， 传索引n , flag -1, 让当前点击列 flag*=-1;其他列 =-1；
1.函数的三种角色：
    1.对象
    2.普通函数
    3.类
2.当函数做为一个类的时候
    1.prototype：公有的属性和方法
    2.__proto__：原型链查找机制
    3.constructor：类 or 构造函数
 所有的类都是函数数据类型 所属的类Function;
 基类：Object
 Function是Object的爹
 Object.prototype 是Function.prototype的爹
3.把数据绑定到页面中
    1）字符串拼接
    2）动态创建和循环插入
    3）动态创建和文档碎片
4.排序有几步骤：
    1）类数组转数组
    2）sort排序
    3）把排好序的数组重新插入页面中

5.正则由两部分组成：元字符和修饰符
元字符：代表特殊意义的元字符 和 代表次数的量词元字符
1）代表特殊意义的元字符
\ 转义
| 或
() 分组
. 除了\n以外的其他任意字符
\n 换行元字符（在控制台换行）
\b 单词边界，开头结尾和空格 'w1       w2 w3'
^ 开头
$ 结尾
[abc] abc三个中的任何一个
[^abc]  除了abc三个中的任何一个
[a-z]  任意一个字母
[^a-z] 除了字母以外的任意字符
 \d 数字     \w 字母数字下划线     \s 空格
 \D 非数字   \W 非字母数字下划线    \S 非空格
 2）代表次数的量词元字符
 * 0到多次
 + 1到多次
 ? 0次或1次
 {n} 代表n次
 {n,} 至少n次
 {n,m} n到m次
 3）修饰符
g 全局的意思
i 忽略大小写
m 换行操作 多行操作
6.正则：规则：操作字符串（匹配和捕获）的一系列规则
匹配？看字符串是否符合我们的规则；reg.test(str)
捕获？把符合我们规则的字符串拎出来；
正则只跟字符串打交道；
7.正则创建的两种方式
1)字面量创建方式
var reg=/\d+/
2）实例创建方式
var reg=new RegExp('\\d+')
8.字面量创建方式和实例创建方式的区别
1)实例创建，特殊含义的字符需要转义，而字面量方式创建不需要
2）实例创建，可以拼接变量，但字面量方式不可以拼接变量；

9.总结小括号的用法
1）提高优先级 /^(18|19)$/   /^(1[89])$/
2）分组的作用
10.中括号的用法：
1）在中括号中的字符没有特殊含义，代表就是他本身的意思； + - . 都没有特殊含义
2）中括号不会出现两位数；[18-98]  1 or 8-9 or 8
11.exec 用来捕获符合我们规则的字符串内容；但是他每次捕获，索引都是从0开始，这也是正则的懒惰性；
exec如果捕获到内容的话，会返回一个数组，有3项内容：
    1）捕获的内容
    2）捕获内容的索引
    3）原始字符串；
exec如果没有捕获到符合规则的内容：null；
12.正则捕获的两个特性：
1）懒惰性
解决措施-加全局修饰符 g;
2）贪婪性
解决措施-量词后面加上?

13.去除首尾空格 reg=/(^ +)|( +$)/g;
去除开头空格 reg=/(^ +)/;
去除结尾空格 reg=/( +$)/;

14.问号的作用：
1）量词 ？ 0次或1次；
2）解决正则贪婪性 :   量词加?




